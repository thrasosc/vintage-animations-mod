plugins {
    id 'com.github.johnrengelman.shadow'
    id 'me.shedaniel.unified-publishing'
}

loom {
    forge {
        mixinConfig "vintage_animations.mixins.json"
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')

    // Architectury API. This is optional, and you can comment it out if you don't need it.
    modImplementation "dev.architectury:architectury-forge:${rootProject.architectury_api_version}"
    modImplementation "dev.kosmx.player-anim:player-animation-lib-forge:${rootProject.player_anim_version}"
    modApi "me.shedaniel.cloth:cloth-config-forge:${rootProject.cloth_config_version}"

    // For compatibility support
    modImplementation "maven.modrinth:first-person-model:${project.first_person_model_forge_version}"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

unifiedPublishing {
    project {
        displayName = "Vintage Animations $project.version"
        gameVersions = ["1.20.1"]
        gameLoaders = ["forge"]
        releaseType = "release" // Optional, use "release", "beta" or "alpha"
        changelog = rootProject.file("changelog.md").text

        mainPublication tasks.remapJar // Declares the publicated jar

        relations {
            depends {
                curseforge = "architectury-api"
                modrinth = "architectury-api"
            }
            depends {
                curseforge = "playeranimator"
                modrinth = "playeranimator"
            }
            depends {
                curseforge = "cloth-config"
                modrinth = "cloth-config"
            }
        }

        var cfToken = System.getenv("CURSEFORGE_TOKEN")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = "1134994" // Required, must be a string, ID of CurseForge project
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = "yY9ix3J0" // Required, must be a string, ID of Modrinth project
            }
        }
    }
}